------------------------------
Environment Stack File Formats
------------------------------

.. meta::
   :og:title: venvstacks File Formats - venvstacks Documentation
   :og:type: website
   :og:url: https://venvstacks.lmstudio.ai/stack-format/
   :og:description: venvstacks Specification and Metadata File Formats - venvstacks Documentation


.. _stack-specification-format:

File naming and formats
=======================

By convention, virtual environment stacks are specified in a file named ``venvstacks.toml``.

The default output folder for layer metadata when publishing artifacts and locally exporting
environments is called ``__venvstacks__``. The platform-specific layer summary metadata
files are called ``venvstacks.json`` and each is written to a folder named after the target
platform in the parent metadata folder. The per-layer metadata files are written to an
``env_metadata`` folder within the platform folders.
Refer to :ref:`layer-metadata` for additional details.

The layer configuration metadata within deployed environments is written to
``share/venv/metadata/venvstacks_layer.json``.
Refer to :ref:`deployed-layer-config` for additional details.

All human-edited input files are written using `TOML <https://toml.io/>`__, as this is a file
format that combines the runtime simplicity and Unicode text compatibility of JSON with the
line-oriented human friendliness of the classic ``.ini`` format. It is the same config file
syntax used to define ``pyproject.toml`` when
:external+packaging:ref:`publishing Python packages <writing-pyproject-toml>`.

All output metadata files generated by the build process are emitted as `JSON <https://www.json.org/>`__.

Defining virtual environment stacks
===================================

Virtual environment stacks are defined using the following top-level fields, which are all TOML
:toml:`arrays of tables <array-of-tables>`:

* ``[[runtimes]]``
* ``[[frameworks]]``
* ``[[applications]]``

Common layer specification fields
---------------------------------

All layer specifications must contain the following two fields:

* ``name`` (:toml:`string`): the name of the layer being specified
* ``requirements`` (:toml:`array` of :toml:`strings <string>`):
  the top-level Python distribution packages to be installed as part of this layer.
  Dependencies are declared using the standard Python
  :external+packaging:ref:`dependency specifier <dependency-specifiers>` format.
  These declared dependencies will be transitively locked when locking the layer.
  The list of requirements must be present, but is permitted to be empty.

All layer specifications may also contain the following optional fields:

* ``platforms`` (:toml:`array` of :toml:`strings <string>`):
  by default, all layers are built for all target platforms. Setting this field
  allows the layer build to be narrowed to a subset of the supported targets.
  Setting this field to an empty list also allows a layer build to be disabled
  without having to delete it entirely.
  Permitted entries in the ``platforms`` list are:

  * ``"win_amd64"``: Windows on x86-64
  * ``"linux_x86_64"``: Linux on x86_64
  * ``"macosx_arm64"``: macOS on Apple silicon
  * ``"macosx_x86_64"``: macOS on Intel silicon (not currently tested in CI)

* ``versioned`` (:toml:`boolean`): by default, and when this setting is ``False``,
  the layer is considered either unversioned or explicitly versioned
  (depending on whether or not a version number is included in the layer name).
  The layer metadata will always report the lock version for these layers as
  ``1`` and this value is never implicitly included when deriving other names
  from the layer name.
  When this setting is ``True``, the layer is considered implicitly versioned.
  For implicitly versioned layers, a lock version number is stored as part of
  the environment lock metadata, and automatically incremented when the
  environment lock file changes as the result of a layer locking request.
  The layer metadata will report the saved lock version for implicitly versioned
  layers and this value is automatically included when deriving some other names
  from the layer name.

The following layer versioning styles are supported:

* *explicitly versioned*: layer name uses a format like ``cpython@3.12``, where
  the layer "version" is considered part of the layer name. Dependencies from
  other layers must refer to the specific version. The ``versioned`` field should be
  omitted or explicitly set to ``False``. Explicit versioning allows upper layers
  to depend on different versions of the "same" lower layer, but also requires
  those layers to be explicitly migrated to new versions of the lower layer.
  Explicit versioning also allows multiple versions of the "same" layer to be
  built and published in parallel.

* *implicitly versioned*: layer name uses a format like ``scipy`` with ``versioned``
  set to ``True``. Dependencies from other layers refer to the unversioned layer name,
  and are automatically updated to depend on the new version of the lower layer when
  the locked requirements change. Some component names derived from the layer name
  will be implicitly rewritten to use ``"{layer_name}@{lock_version}"`` rather than
  using the layer name on its own. Only the latest version of an implicitly versioned
  layer can be built and published, but different versions can still be installed
  in parallel on target systems.

* *unversioned*: layer name uses a format like ``my-app`` with ``versioned``
  omitted or set to ``False``. Dependencies from other layers refer to the
  unversioned layer name. Only the latest version of an implicitly versioned
  layer can be built and published, and only one versioned can be installed
  on any given target system. :ref:`Artifact tagging <layer-metadata>` allows multiple versions
  of unversioned layers to still be distributed in parallel.

Refer to :ref:`layer-names` for additional details on how layer names are used
when building virtual environment stacks, as well as aspects to consider when
choosing between unversioned, explicitly versioned, and implicitly versioned layers.


Runtime layer specification fields
----------------------------------

Runtime layer specifications must contain the following additional field:

* ``fully_versioned_name`` (:toml:`string`): the :pypi:`pbs-installer` name
  of the Python runtime to be installed as the base runtime for this layer
  (and any upper layers that depend on this layer).


Framework layer specification fields
------------------------------------

Framework layer specifications must contain the following additional field:

* ``runtime`` (:toml:`string`): the name of the runtime layer that this framework layer uses.

On platforms which use symlinks between layered environments and their base
environments (any platform other than Windows), the runtime layer name will
be recorded in the ``runtime_name`` field of the framework layer metadata.
This allows for transparent security updates of the base runtime layer (for
example, to update to new OpenSSL versions or CPython maintenance releases),
without needing to republish the upper layers that use that base runtime.

On Windows, where some elements of the base runtime are copied into each
layered environment that depends on it, the runtime ``fully_versioned_name``
field will be recorded in the ``runtime_name`` field of the framework layer
metadata. This still allows for transparent security updates of the base
runtime layer in (for
example, to update to new OpenSSL versions or CPython maintenance releases),
without needing to republish the upper layers that use that base runtime.

.. _warning: The current handling of the ``runtime_name`` field in the layer
   metadata is highly questionable, and hence subject to change in future
   releases without a deprecation period.


Application layer specification fields
--------------------------------------

Application layer specifications must contain the following additional field:

* ``frameworks`` (:toml:`array` of :toml:`strings <string>`):
  the names of the framework layers that this application layer uses.

Application layer specifications may also contain the following additional field:

* ``launch_module`` (:toml:`string`): a relative path (starting from the folder containing
  the stack specification file) that specifies a Python module or import package that should
  be included in the built environment for execution with the :option:`-m` switch.

The ``runtime`` dependency for application layers is not specified directly. Instead, all
of the declared framework dependencies *must* depend on the same runtime layer, and that
base runtime also becomes the base runtime for the application layer using those frameworks.


.. note:: updating the launch module contents does *not* implicitly update the lock version
          for implicitly versioned environments (but it does update the ``archive_build``
          field for published artifacts).


.. _layer-names:

Layer names and versioning
==========================

Regardless of how a layer is versioned, the layer name is used directly
(with no additional prefix or suffix) when referring to the layer as a
dependency in another layer specification.

The layer name is also used directly (in combination with the :term:`layer type`
prefix) for the following purposes:

* the name of the layer build environment
* the name of the layer requirements file folder
* as part of the name of the transitively locked layer requirements files
* as the base name for the layer environment metadata file emitted when
  publishing or exporting the environment
* as the ``layer_name`` field in the generated layer metadata

Runtime layers do not have a layer type prefix, while framework and application
layers use ``app-*`` and ``framework-*`` respectively.

Explicitly versioned and unversioned layers use their layer name directly
 (in combination with their :term:`layer type` prefix) for the following purposes:

* the name of the deployed layer environment when publishing artifacts or
  locally exporting environments
* as the ``install_target`` field in the generated layer metadata
* when referring to the layer as a dependency in another layer's deployment
  configuration and output metadata

Implicitly versioned layers will instead use ``"{layer_name}@{lock_version}"``
for these deployment related purposes.


.. note:: A future documentation update will provide additional guidance on the trade-offs
          between explicit versioning, implicit versioning, and leaving layers unversioned.


.. _layer-requirements:

Locked layer requirements
=========================

.. note:: A future documentation update will cover the ``venvstacks lock`` output files here.

.. _deployed-layer-config:

Deployed layer configuration
============================

.. note:: A future documentation update will cover the ``share/venv/metadata/venvstacks_layer.json`` files here.

.. _layer-metadata:

Published layer metadata
========================

.. note:: A future documentation update will cover the ``venvstacks publish``
          and ``venvstacks local-export`` output metadata files here, including
          the effects of the ``--tag-outputs`` command line option when publishing.
