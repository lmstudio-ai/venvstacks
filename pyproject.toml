[project]
name = "venvstacks"
version = "0.4.0"
description = "Use layered Python virtual environment stacks to share large dependencies"
authors = [
    {name = "Alyssa Coghlan", email = "ncoghlan@gmail.com"},
]
maintainers = [
    {name = "LM Studio", email = "team@lmstudio.ai"},
]

dependencies = [
    # Environment package installation is run externally (from the build tools environment)
    "pip>=24.1.1",
    # PDM is used to install the base runtime environments for deployment
    "pdm>=2.17.3",
    # `uv pip compile` is used rather than `pip-compile` as it is faster and
    # doesn't have to be installed into the target Python runtime environment.
    # Due to https://github.com/astral-sh/uv/issues/2500 `uv` can't be used to
    # replace `pip install`
    # Due to https://github.com/astral-sh/uv/issues/2831 we're also not trying to
    # replace `python -Im venv` with `uv venv` at this point since we want explicit
    # control over whether files are symlinked or copied between the environments
    "uv>=0.2.33",
    # Typer is used for the CLI interface. Install 'rich-cli' extra for enhanced features.
    "typer-slim>=0.12.4",
]
requires-python = ">=3.11"
readme = "README.md"
license = {text = "MIT"}
keywords = ["packaging", "dependency", "venv"]
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Build Tools",
    "Typing :: Typed",
]

[project.optional-dependencies]
rich-cli = [
  # Enable typer's enhanced functionality for local interactive use
  "typer>=0.12.4",
]

[project.scripts]
venvstacks = "venvstacks.cli:main"

[project.urls]
Homepage = "https://github.com/lmstudio-ai/venvstacks"
Documentation = "https://venvstacks.lmstudio.ai/"
Issues = "https://github.com/lmstudio-ai/venvstacks/issues"
Changelog = "https://venvstacks.lmstudio.ai/changelog/"

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[dependency-groups]
dev = [
    {include-group = "task-runner"},
    {include-group = "test"},
    {include-group = "lint"},
    {include-group = "typecheck"},
    # Utility for generating release note fragments
    "scriv[toml]>=1.5.1",
]
task-runner = [
    "tox>=4.16.0",
    "tox-gh>=1.3.2",
    # Note: may be able to drop tox-pdm after tox and pdm
    # both support the standardised lock file format
    "tox-pdm>=0.7.2",
]
dynlib-wheel-build = [
    # Installed in the dynlib wheel build env,
    # not directly in test or dev environments
    "meson-python>=0.17.1",
    "pkgconf>=2.4.3.post1",
    "ninja>=1.11.1.4; sys_platform == 'win32'",
    "pip>=25.0.1",
]
test = [
    "pytest>=8.3.1",
    "pytest-subtests>=0.13.1",
    "coverage[toml]>=7.6.4",
    # Exact pin for tests as runtime environments are sensitive to the pbs version
    "pbs-installer==2025.3.17",
    # Exact pin for tests as lock file regeneration is sensitive to the uv version
    "uv==0.6.9",
]
lint = [
    "ruff>=0.5.4",
]
typecheck = [
    "mypy>=1.11.0",
]
bootstrap = [
    # Need support for the [dependency-groups] table
    "pdm>=2.20.0",
]
docs = [
    "sphinx>=8.1.3",
    "furo>=2024.8.6",
]

[tool.pdm]
distribution = true

[tool.pytest.ini_options]
# Allow skipping slow tests for local testing
addopts = "--strict-markers"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "expected_output: tests to run when regenerating expected output",
]
# Warnings should only be emitted when being specifically tested
filterwarnings = [
    "error",
    "ignore:The venvstacks API is NOT YET STABLE:FutureWarning"
]
# Make long diffs visible in pytest 8.3.3 and later
verbosity_assertions = 2
# Ensure test suite doesn't consume too much space in /tmp, while still allowing debugging
tmp_path_retention_policy = "failed"
tmp_path_retention_count = 1

[tool.coverage.run]
relative_files = true
source_pkgs = [
    "venvstacks",
]
source = [
    "tests/",
]
omit = [
    # There is quite a bit of test support code that
    # only runs to help diagnose failures in CI
    "tests/support.py",
]

[tool.coverage.paths]
source = [
    "src/",
    "**/.tox/**/site-packages/",
]

[tool.ruff]
# Assume Python 3.11
target-version = "py311"

[tool.ruff.lint]
# Enable all `pydocstyle` rules, limiting to those that adhere to the
# Google convention via `convention = "google"`, below.
extend-select = ["D"]

# Disable `D105` (it's OK to skip writing docstrings for every magic method)
# Disable `D417` (not yet requiring documentation for every function parameter)
ignore = ["D105", "D417"]

[tool.ruff.lint.pydocstyle]
# https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html#example-google
convention = "google"

[tool.ruff.lint.per-file-ignores]
# Skip checking docstrings in the test suite
"tests/**" = ["D"]

[tool.scriv]
version = "literal: pyproject.toml: project.version"
fragment_directory = "docs/changelog.d"
skip_fragments = "README[._]*"
ghrel_template = "file: ghrel_template.md.j2"
